package io.github.exploiting.flinks.stateful.operators.advanced_fc

import java.util.UUID

import io.github.exploiting.flinks.stateful.operators.model.{SimpleTransaction, TransactionEvent}

case class UuidTransaction(id: UUID, expectedNumberOfKeys: Int, payload: Map[String, Any]) extends TransactionEvent

// TODO Add field for 'expected amount of events'
case class DynamicKeyEvent(id: UUID, operationName: String, keyValue: KeyWithValues, expectedNumberOfKeys: Int, payload: Map[String, Any],
                           operationInput: List[Key], operation: (String, Value) => StateF[Double])

case class EnrichedTransaction(id: UUID, payload: Map[String, Any], state: Map[String, Any]) extends TransactionEvent

case class EnrichedSimpleTransaction(id: UUID,
                                     transaction: Option[SimpleTransaction],
                                     customerSpeed: Double,
                                     avCardTransactionAmount: Double) extends TransactionEvent

case class UuidWithState(id: UUID,
                         key: KeyWithValues, // we need to know to which key this state belongs to, in case we want to aggregate the same payload with different keys (f.e. total amount per card and total amount per customer)
                         state: Map[String, Any]) extends TransactionEvent

case class CardState(totalAmount: Double, totalNrTransactions: Int)

case class ResultEvent(id: UUID, key: Key, result: Any, expectedAmount: Int)
