package io.github.exploiting.flinks.stateful.operators.advanced_fc

import java.util.UUID

import io.github.exploiting.flinks.stateful.operators.model.{Location, SimpleTransaction, TransactionEvent}
import Manager._

case class UuidTransaction(id: UUID, payload: Map[String, Any]) extends TransactionEvent

case class DynamicKeyEvent(id: UUID, key: KeyWithValues, payload: Map[String, Any], operation: List[String])

case class UuidWithState(id: UUID,
                         key: KeyWithValues, // we need to know to which key this state belongs to, in case we want to aggregate the same payload with different keys (f.e. total amount per card and total amount per customer)
                         state: Map[String, Any]) extends TransactionEvent


case class DynamicState(state: Map[String, Any]){
  def update( newValues: List[(String, Any)]): DynamicState = DynamicState(state ++ newValues)
}

case class EnrichedTransaction(id: UUID, payload: Map[String, Any], state: Map[String, Any])