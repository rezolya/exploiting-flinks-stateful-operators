package io.github.exploiting.flinks.stateful.operators.stateless_fc

import io.github.exploiting.flinks.stateful.operators.model._
import io.github.exploiting.flinks.stateful.operators.{StatelessTransactionSource, ThrottlingSource}
import org.apache.flink.streaming.api.TimeCharacteristic
import org.apache.flink.streaming.api.scala._

object StatelessFlyingCarpetJob {

  // The source, at a rate of 10 elements/sec.
  val fullTransactionSource = new ThrottlingSource[StatelessTransaction](new StatelessTransactionSource, 10)

  // One event comes in (with all data required for scoring) one result comes out.
  def main(args: Array[String]): Unit = {
    val env = StreamExecutionEnvironment.getExecutionEnvironment
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)
    env.setParallelism(4)

    val inputStream: DataStream[StatelessTransaction] = env.addSource(fullTransactionSource)

    val scoredFlyingCarpetStream: DataStream[ScoringResult] = inputStream
      .map(event => ScoringResult(event, FraudRules.scoreFlyingCarpet(event)))

    scoredFlyingCarpetStream.print()

    println(env.getExecutionPlan)

    env.execute("Flink Stateless Flying Carpet transaction")
  }
}
