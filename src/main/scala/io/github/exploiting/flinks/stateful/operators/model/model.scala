package io.github.exploiting.flinks.stateful.operators.model

import scala.collection.immutable

trait TransactionEvent
case class SimpleTransaction(customerId: String,
                             cardId: Int,
                             location: Location,
                             UTC: Long,
                             amount: Double) extends TransactionEvent

case class ScoringResult(event: TransactionEvent, score: Boolean)

/**
  * History class that is a circular buffer, oldest elements are overwritten when the buffer is full.
  * @param maxSize How many items we want to store.
  * @param buffer Initialize it with a buffer.
  * @tparam A The type we store in this class.
  */
case class History[A](maxSize: Int, buffer: Vector[A] = immutable.Vector.empty[A]) {
  type CircularBuffer = immutable.Vector[A]

  private def addToCircularBuffer(item : A) : CircularBuffer  =
    if(maxSize > 0)
      buffer.drop(buffer.size - maxSize + 1) :+ item
    else
      buffer

  def :+(item: A): History[A] = History(maxSize, addToCircularBuffer(item))
}
